-- sandpit.dx
-- just messing around...


-- a few useful functions, which should maybe be in the prelude

def iterate {a} (n: Nat) (step: a -> a) (init: a) : Fin n => a =
  with_state init \st.
    for i:(Fin n).
      old = get st
      next = step old
      st := next
      old

def unfold {a b} (n: Nat) (advance: a -> (b & a)) (init: a) : Fin n => b =
  with_state init \st.
    for i:(Fin n).
      (b, a) = advance (get st)
      st := a
      b

def last {a n} (arr: Fin n => a): a =
  head $ reverse arr -- TODO: must be a better way?!

def to_tsv {n p} (mat: n=>p=>Float) : String =
  ms = for i j. show mat.i.j <> "\t"
  concat (map (\l. l <> "\n") (map concat ms))


-- examples

iterate 10 (\x. x*2) 1

unfold 10 (\a. (show a, a+1)) 0

last [1.0,2,3,4]

m = [[1.0,2,3],[4.4,5,6]]
to_tsv m





-- eof
