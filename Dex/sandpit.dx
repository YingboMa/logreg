-- sandpit.dx
-- just messing around...


def iterate {a} (n: Nat) (step: a -> a) (init: a) : Fin n => a =
  with_state init \st.
    for i:(Fin n).
      old = get st
      next = step old
      st := next
      old

iterate 10 (\x. x*2) 1

def unfold {a b} (n: Nat) (advance: a -> (b & a)) (init: a) : Fin n => b =
  with_state init \st.
    for i:(Fin n).
      (b, a) = advance (get st)
      st := a
      b

unfold 10 (\a. (show a, a+1)) 0

def last {a n} (arr: Fin n => a): a =
  head $ reverse arr -- TODO: must be a better way?!

last [1.0,2,3,4]





x = for i:(Fin 10).
  n_to_f (ordinal i)
x
xs = map (\ x. show x <> " ") x
xs
concat xs

m = [[1.0,2,3],[4.4,5,6]]
m

def to_tsv {n p} (mat: n=>p=>Float) : String =
  ms = for i j. show mat.i.j <> "\t"
  concat (map (\l. l <> "\n") (map concat ms))

mstr = to_tsv m
mstr



-- eof
