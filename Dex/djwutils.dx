-- djwutils.dx
-- Some generic utility functions
-- some of which should probably be added to the standard Dex prelude

def iterate {a} (n: Nat) (step: a -> a) (init: a) : Fin n => a =
  with_state init \st.
    for i:(Fin n).
      old = get st
      next = step old
      st := next
      old

def unfold {a b} (n: Nat) (advance: a -> (b & a)) (init: a) : Fin n => b =
  with_state init \st.
    for i:(Fin n).
      (b, a) = advance (get st)
      st := a
      b

def length {a n} [Ix n] (arr: n=>a): Nat =
  size n

def last_dumb {a n} [Ix n] (arr: n=>a): a =
  head $ reverse arr

def last {a n} [Ix n] (arr: n=>a): a =
  nind = unsafe_nat_diff (size n) 1
  arr.(asidx nind)

def to_tsv {n p} (mat: n=>p=>Float) : String =
  ms = for i j. show mat.i.j <> "\t"
  concat (map (\l. l <> "\n") (map concat ms))

-- based on "lines" from the prelude...
def words (sep: Word8) (source: String): List String =
  (AsList _ s) = source <> (to_list [sep])
  (AsList num_words space_ixs) = cat_maybes for i_char.
    if (s.i_char == sep)
      then Just i_char
      else Nothing
  to_list for i_word:(Fin num_words).
    start = case prev_ix i_word of
      Nothing -> first_ix
      Just i -> right_post space_ixs.i
    end = left_post space_ixs.i_word
    post_slice s start end

def cons {a} (x: a) (xs: List a): List a =
  (AsList on xt) = xs
  n = on + 1
  nxt = for i:(Fin n). case (ordinal i == 0) of
    True -> x
    False -> xt.(asidx (unsafe_nat_diff (ordinal i) 1))
  to_list nxt

def list_to_tab {n a b} [Ix n] (dummyt: n=>b) (l: List a): n=>a =
  (AsList ll t) = l
  unsafe_cast_table n t

def parse_tsv (sep: Word8) (input: String): List (List String) =
  (AsList _ lines) = lines input
  to_list $ map (words sep) lines

def step_n {s} (n: Nat) (kern: Key -> s -> s) : Key -> s -> s =
  def go (k: Key) (state: s) : s =
    xv = with_state state \st.
      for i:(Fin n).
        x = kern (ixkey k i) (get st)
        st := x
        x
    last xv
  go


-- from Dex example file, examples/mcmc.dx
def meanAndCovariance {n d} (xs:n=>d=>Float) : (d=>Float & d=>d=>Float) =
   xsMean :    d=>Float = (for i. sum for j. xs.j.i) / n_to_f (size n)
   xsCov  : d=>d=>Float = (for i i'. sum for j.
                           (xs.j.i' - xsMean.i') *
                           (xs.j.i  - xsMean.i )   ) / (n_to_f (size n) - 1)
   (xsMean, xsCov)




-- eof
